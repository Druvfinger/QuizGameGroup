 public ImageIcon getRandomImageIcon() {
        int randomImage = (int) (Math.random() * 20 + 1);
        String filePath = "C:\\Users\\46762\\Desktop\\Pictures\\Bild" + randomImage + ".png";
        return new ImageIcon(filePath);
    }

----------------------------------------------------------------------------------------------------------
        public JPanel createDesiredNumberOfPanels(JPanel panelToFill, int numberOfPanels) {
            panelToFill.setLayout(new GridLayout(numberOfPanels, 1));
            for (int i = 0; i < numberOfPanels; i++) {
                JPanel panel = new JPanel();
                panel.setOpaque(true);
                panel.setBackground(Constants.VERY_LIGHT_BLUE);
                panel.setBorder(new LineBorder(Constants.LIGHT_BLUE, 1));
                panelToFill.add(panel);
            }
            return panelToFill;
        }
----------------------------------------------------------------------------------------------------------
         public ImageIcon setSizeToFitLabel(JLabel label, String imagePath) {
                BufferedImage image = null;
                try {
                    image = ImageIO.read(new File(imagePath));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                Image resizedImage = image.getScaledInstance(label.getWidth(), label.getHeight(),
                        Image.SCALE_SMOOTH);
                return new ImageIcon(resizedImage);
            }
----------------------------------------------------------------------------------------------------------
            public String getCurrentCategory() {
                    return currentCategory;
                }

----------------------------------------------------------------------------------------------------------

                    public void showResults() {

                    }
----------------------------------------------------------------------------------------------------------

                    public void showFinalResults() {
                    }
----------------------------------------------------------------------------------------------------------
                    public void gameTest() {
                        WelcomeScreen welcomeScreen = new WelcomeScreen(null); // ändrade i metoden
                        if (!isLastRound()) {
                            chooseCategory();
                            newRound();
                            showResults();
                        } else if (isLastRound()) {
                            chooseCategory();
                            newRound();
                            showFinalResults();
                        }
                    }
----------------------------------------------------------------------------------------------------------
    public void makeLabelForScoreEachRound() {
        String name = "Round " + gameScreen.getCurrentRound() + ": " + game.getCurrentPlayer().getCurrentScore();
        //Try to make label for score keeping
    }
----------------------------------------------------------------------------------------------------------
    public boolean isLastQuestion() {
            int numQuestions = getNumberOfQuestions();
            return gameScreen.currentQuestion == numQuestions; // true if currentQuestion == numQuestions
        }
    }
----------------------------------------------------------------------------------------------------------
    public void drawUpQuestion(JLabel questionLabel, List<JButton> buttonList) {
            questionLabel.setText(database.getQuestion(null));                  // OBS!!!! Null parameter!!!
            List<String> answers = database.getAnswers(null);                   // OBS!!!! Null parameter!!!
            for (int i = 0; i < answers.size(); i++) {
                buttonList.get(i).setText(String.valueOf(answers.get(i)));
                /*gameScreen.repaint();
                gameScreen.revalidate();
            }
        }
    }
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
    public int getNumberOfRounds() {
            try (InputStream input = new FileInputStream("src/Settings.properties")) {
                Properties prop = new Properties();
                return Integer.parseInt(prop.getProperty("numberOfRounds", "3"));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
    public int getNumberOfQuestions() {
            try (InputStream input = new FileInputStream("src/Settings.properties")) {
                Properties prop = new Properties();
                return Integer.parseInt(prop.getProperty("numberOfQuestions", "3"));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
    public void chooseCategory() {
            gameScreen.questionLabel.setText("What Category do you want to choose");
            for (int i = 0; i < 4; i++) {
                gameScreen.buttonList.get(i).setText(String.valueOf(database.getCategories()));
                gameScreen = new GameScreen(currentPlayer.player, null, null,null,null);// ändrat i metoden
                gameScreen.repaint();
                gameScreen.revalidate();
            }
        }
    }
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
    public void newQuestion() {
            while (gameScreen.isAnswered) {
                //drawUpQuestion();
                if (gameScreen.isAnswerCorrect) {
                    currentPlayer.score++; // funkar detta ?
                    currentPlayer.currentScore++;
                }
                gameScreen.isAnswered = false;
            }
        }
    }
----------------------------------------------------------------------------------------------------------